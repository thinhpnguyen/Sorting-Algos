{"version":3,"sources":["components/Graph.js","components/Header.js","components/Input.js","components/Sort.js","components/App.js","index.js"],"names":["ChartWrapper","canvasId","data","title","height","Array","length","fill","ctx","document","getElementById","getContext","this","flag","chart_ctx","Chart","type","labels","map","v","datasets","label","backgroundColor","backgroundColorArray","borderColor","borderWidth","options","scales","y","max","beginAtZero","responsive","animation","duration","plugins","legend","display","tooltip","enabled","text","font","size","update","newData","updateData","val","i","a","b","arr","tmp","Graph","props","useState","undefined","graph_wrapper","setGraph","useEffect","reset","id","nums","sortType","updateChart","setFlag","sort","sortFunction","className","width","header","onClick","window","location","href","input","placeholder","onChange","handleChange","value","onKeyDown","handleEnter","handleClear","delay","sleep","milliseconds","Promise","resolve","setTimeout","BubbleSort","inputArr","getChartData","n","j","getFlag","highlight","swap","unhighlight","SelectionSort","min","exMin","highlightMin","MergeSort","merge","l","m","r","n1","n2","L","R","k","mergeSortHelper","parseInt","QuickSort","partition","low","high","pivot","quickSortHelper","pi","App","sortEn","updateSortEn","updateReset","updateInput","filteredInput","useMemo","replace","split","filtered","forEach","str","push","inputToNums","num","findMax","Header","Input","event","newInput","target","key","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.17bef761.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Chart from \"chart.js/auto\";\n//import { BubbleSort } from \"./Sort.js\";\n\n/*\nThis class is an adapter which takes care of creating or updating the graph.js object\nIt also adds more functionality such as highlighting\n*/\nclass ChartWrapper {\n  constructor(canvasId, data, title, height) {\n    let backgroundColorArray = new Array(data.length);\n    backgroundColorArray.fill(\"rgba(255, 99, 132, 0.2)\");\n    let ctx = document.getElementById(canvasId).getContext(\"2d\");\n\n    /* \n    This flag this used to stop the async sort functions to operate on the new data when reset\n    Because the update methods will operate on new data array ref\n    We can move the update the methods to the Sort module instead, as a second choice, so they will only update on the old data set\n    Which the user will not see, \n     */\n    this.flag = false;\n\n    this.chart_ctx = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: data.map((v) => \"\"),\n        datasets: [\n          {\n            label: title,\n            data: data,\n            backgroundColor: this.backgroundColorArray,\n            borderColor: \"rgba(255, 99, 132, 1)\",\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          y: {\n            max: height,\n            beginAtZero: true,\n          },\n        },\n        responsive: false,\n        animation: {\n          duration: 0,\n        },\n        plugins: {\n          legend: {\n            display: false,\n          },\n          tooltip: {\n            enabled: false,\n          },\n          title: {\n            display: true,\n            text: title,\n            font: {\n              size: 20,\n            },\n          },\n        },\n      },\n    });\n  }\n\n  updateData() {\n    this.chart_ctx.update();\n  }\n  updateChart(newData, max) {\n    this.flag = false;\n    this.chart_ctx.data.datasets[0].data = newData;\n    this.chart_ctx.data.labels = newData.map((v) => \"\");\n    let backgroundColorArray = new Array(newData.length);\n    backgroundColorArray.fill(\"rgba(255, 99, 132, 0.2)\");\n    this.chart_ctx.data.datasets[0].backgroundColor = [...backgroundColorArray];\n    this.chart_ctx.options.scales.y.max = max;\n    this.updateData();\n  }\n  getChartCtx() {\n    return this.chart_ctx;\n  }\n  getChartData() {\n    return this.chart_ctx.data.datasets[0].data;\n  }\n  getChartLabels() {\n    return this.chart_ctx.labels;\n  }\n  getFlag() {\n    return this.flag;\n  }\n  /** Update Methods **/\n  setFlag(val) {\n    this.flag = val;\n  }\n  updateAnElement(i, val) {\n    if (!this.flag) return;\n    this.chart_ctx.data.datasets[0].data[i] = val;\n  }\n\n  highlight(i) {\n    if (!this.flag) return;\n    this.chart_ctx.data.datasets[0].backgroundColor[i] =\n      \"rgba(255, 99, 132, 0.8)\";\n    this.updateData();\n  }\n\n  unhighlight(i) {\n    if (!this.flag) return;\n    this.chart_ctx.data.datasets[0].backgroundColor[i] =\n      \"rgba(255, 99, 132, 0.2)\";\n    this.updateData();\n  }\n\n  highlightMin(i) {\n    if (!this.flag) return;\n    this.chart_ctx.data.datasets[0].backgroundColor[i] =\n      \"rgba(54, 162, 235, 0.2)\";\n    this.updateData();\n  }\n\n  swap(a, b) {\n    if (!this.flag) return;\n    let arr = this.chart_ctx.data.datasets[0].data;\n\n    let tmp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = tmp;\n\n    this.updateData();\n  }\n}\n\nlet Graph = (props) => {\n  // props.reset in initialized to true to render the empty graph first\n  let [graph_wrapper, setGraph] = useState(undefined);\n\n  useEffect(() => {\n    if (props.reset && graph_wrapper === undefined) {\n      setGraph(\n        new ChartWrapper(props.id, [...props.nums], props.sortType, props.max)\n      );\n    } else if (props.reset && graph_wrapper !== undefined) {\n      graph_wrapper.updateChart([...props.nums], props.max);\n    }\n  }, [props.reset]);\n\n  useEffect(() => {\n    //console.log(props.sort);\n    graph_wrapper && graph_wrapper.setFlag(props.sort);\n    if (props.sort) {\n      props.sortFunction(graph_wrapper);\n    }\n  }, [props.sort]);\n  return (\n    <canvas className=\"graph\" id={props.id} width=\"400\" height=\"400\"></canvas>\n  );\n};\nexport default Graph;\n","import React from \"react\";\n\nfunction header() {\n  return (\n    <div className=\"navbar\">\n      <div\n        className=\"logo\"\n        onClick={() => {\n          window.location.href = \"/\";\n        }}\n      >\n        Flow\n      </div>\n    </div>\n  );\n}\n\nexport default header;\n","import React from \"react\";\n\nfunction input(props) {\n  return (\n    <div className=\"inputField\">\n      <input\n        placeholder=\"Type in a list of numbers. Ex: 3 5 7 9\"\n        onChange={props.handleChange}\n        className=\"input\"\n        value={props.input}\n        onKeyDown={props.handleEnter}\n      />\n      <div>\n        <i className=\"fas fa-times clearButton\" onClick={props.handleClear}></i>\n      </div>\n    </div>\n  );\n}\n\nexport default input;\n","let delay = 50;\n\nconst sleep = (milliseconds) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport async function BubbleSort(ChartWrapper) {\n  let inputArr = ChartWrapper.getChartData();\n  //let labels = myChart.data.labels;\n  let n = inputArr.length;\n\n  let i, j;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n - i; j++) {\n      if (!ChartWrapper.getFlag()) return;\n      ChartWrapper.highlight(j);\n      if (inputArr[j] > inputArr[j + 1]) {\n        ChartWrapper.highlight(j + 1);\n        ChartWrapper.swap(j, j + 1);\n      }\n      await sleep(delay);\n      ChartWrapper.unhighlight(j + 1);\n      ChartWrapper.unhighlight(j);\n    }\n  }\n}\n\nexport async function SelectionSort(ChartWrapper) {\n  let inputArr = ChartWrapper.getChartData();\n  let n = inputArr.length;\n  for (let i = 0; i < n; i++) {\n    //change color if ith column\n    ChartWrapper.highlight(i);\n\n    // Finding the smallest number in the subarray\n    let min = i;\n    let exMin = i;\n    for (let j = i + 1; j < n; j++) {\n      if (!ChartWrapper.getFlag()) return;\n      //first hightlight the pointer\n      ChartWrapper.highlight(j);\n      if (inputArr[j] < inputArr[min]) {\n        exMin = min;\n        min = j;\n      }\n      await sleep(delay);\n      ChartWrapper.unhighlight(j);\n\n      //change the hightlight if min changes\n      if (min !== exMin) {\n        if (exMin !== i) {\n          ChartWrapper.unhighlight(exMin);\n        }\n        ChartWrapper.highlightMin(min);\n      }\n    }\n    if (min !== i) {\n      ChartWrapper.unhighlight(min);\n      // Swapping the elements and labels\n      ChartWrapper.swap(min, i);\n    }\n\n    //change color back\n    ChartWrapper.unhighlight(i);\n  }\n}\n\nexport function MergeSort(ChartWrapper) {\n  const merge = async (arr, l, m, r) => {\n    if (!ChartWrapper.getFlag()) return;\n    let n1 = m - l + 1;\n    let n2 = r - m;\n\n    // Create temp arrays\n    let L = new Array(n1);\n    let R = new Array(n2);\n\n    // Copy data to temp arrays L[] and R[]\n    for (let i = 0; i < n1; i++) L[i] = arr[l + i];\n    for (let j = 0; j < n2; j++) R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n\n    // Initial index of first subarray\n    let i = 0;\n\n    // Initial index of second subarray\n    let j = 0;\n\n    // Initial index of merged subarray\n    let k = l;\n\n    while (i < n1 && j < n2) {\n      if (!ChartWrapper.getFlag()) return;\n      if (L[i] <= R[j]) {\n        arr[k] = L[i];\n        i++;\n      } else {\n        arr[k] = R[j];\n        j++;\n      }\n      k++;\n      ChartWrapper.updateData();\n      await sleep(delay);\n    }\n\n    // Copy the remaining elements of\n    // L[], if there are any\n    while (i < n1) {\n      if (!ChartWrapper.getFlag()) return;\n      arr[k] = L[i];\n      i++;\n      k++;\n      ChartWrapper.updateData();\n      await sleep(delay);\n    }\n\n    // Copy the remaining elements of\n    // R[], if there are any\n    while (j < n2) {\n      if (!ChartWrapper.getFlag()) return;\n      arr[k] = R[j];\n      j++;\n      k++;\n      ChartWrapper.updateData();\n      await sleep(delay);\n    }\n  };\n  const mergeSortHelper = async (arr, l, r) => {\n    if (!ChartWrapper.getFlag()) return;\n\n    if (l >= r) {\n      return; //returns recursively\n    }\n    let m = l + parseInt((r - l) / 2);\n    await mergeSortHelper(arr, l, m);\n    await mergeSortHelper(arr, m + 1, r);\n    await merge(arr, l, m, r);\n  };\n  (function () {\n    let inputArr = ChartWrapper.getChartData();\n    let n = inputArr.length;\n    mergeSortHelper(inputArr, 0, n - 1);\n  })();\n}\n\nexport function QuickSort(ChartWrapper) {\n  async function partition(arr, low, high) {\n    if (!ChartWrapper.getFlag()) return;\n    // pivot\n    let pivot = arr[high];\n    ChartWrapper.highlight(high);\n    ChartWrapper.highlight(low);\n    // Index of smaller element and\n    // indicates the right position\n    // of pivot found so far\n    let i = low - 1;\n\n    for (let j = low; j <= high - 1; j++) {\n      if (!ChartWrapper.getFlag()) return;\n      // If current element is smaller\n      // than the pivot\n      if (arr[j] < pivot) {\n        // Increment index of\n        // smaller element\n        ++i;\n        ChartWrapper.swap(i, j);\n      }\n      await sleep(delay);\n    }\n    //await sleep(delay);\n    ChartWrapper.swap(i + 1, high);\n    ChartWrapper.unhighlight(high);\n    ChartWrapper.unhighlight(low);\n    return i + 1;\n  }\n  async function quickSortHelper(arr, low, high) {\n    if (!ChartWrapper.getFlag()) return;\n    if (low < high) {\n      // pi is partitioning index, arr[p]\n      // is now at right place\n      let pi = await partition(arr, low, high);\n\n      // Separately sort elements before\n      // partition and after partition\n      await quickSortHelper(arr, low, pi - 1);\n      await quickSortHelper(arr, pi + 1, high);\n    }\n  }\n  (function quickSort() {\n    let inputArr = ChartWrapper.getChartData();\n    let n = inputArr.length;\n    quickSortHelper(inputArr, 0, n - 1);\n  })();\n}\n","import React, { useState, useMemo } from \"react\";\nimport Graph from \"./Graph.js\";\nimport Header from \"./Header.js\";\nimport Input from \"./Input.js\";\nimport { BubbleSort, SelectionSort, MergeSort, QuickSort } from \"./Sort.js\";\n\n//this function takes in a string\n//filter out only the number part\nfunction filter(str) {\n  // only takes str the first 20 numbers, exlude other characters\n  str = str.replace(/[^\\d\\s]/g, \"\");\n  str = str.replace(/\\s\\s+/g, \" \");\n  str = str.replace(/(^\\s|\\s$)/g, \"\");\n  //console.log(str);\n  return str.split(\" \", 100);\n}\nfunction inputToNums(filtered) {\n  let nums = [];\n  filtered.forEach((str) => {\n    nums.push(parseInt(str));\n  });\n  return nums;\n}\n\nfunction findMax(nums) {\n  let m = 1; // default value for y-axis\n  nums.forEach((num) => {\n    if (num > m) m = num;\n  });\n  return m;\n}\n\nfunction App() {\n  const [sortEn, updateSortEn] = useState(false);\n  const [reset, updateReset] = useState(true); // render empty graph first\n  //input\n  const [input, updateInput] = useState(\"\");\n\n  const filteredInput = useMemo(() => filter(input), [input]); // use for labels\n  const nums = useMemo(() => inputToNums(filteredInput), [filteredInput]);\n  const max = useMemo(() => findMax(nums), [nums]); // use to scale the graph, so it will be changed during sorting\n\n  //////////////// State Handles /////////////////////////\n  function handleSort() {\n    updateReset(false);\n    updateSortEn(true);\n  }\n\n  function handleReset() {\n    //console.log(nums);\n    updateReset(true);\n    updateSortEn(false);\n  }\n\n  function handleEnter(event) {\n    if (event.key !== \"Enter\") return;\n    updateReset(true);\n    updateSortEn(false);\n    //console.log(\"enter\");\n  }\n  function handleChange(event) {\n    const newInput = event.target.value;\n    updateInput(newInput);\n    updateReset(false); //allow the reset button to work again\n  }\n\n  function handleClear() {\n    updateReset(false);\n    updateInput(\"\");\n  }\n\n  return (\n    <div>\n      <Header />\n      <Input\n        handleChange={handleChange}\n        handleClear={handleClear}\n        handleEnter={handleEnter}\n        input={input}\n      />\n      <div className=\"globalButton\">\n        <button className=\"button\" onClick={handleSort}>\n          Sort\n        </button>\n        <button className=\"button\" onClick={handleReset}>\n          Reset\n        </button>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"column\">\n          <Graph\n            id=\"myChart1\"\n            sortType=\"Selection Sort\"\n            sort={sortEn}\n            reset={reset}\n            nums={nums}\n            max={max}\n            sortFunction={SelectionSort}\n          />\n          <Graph\n            id=\"myChart2\"\n            sortType=\"Bubble Sort\"\n            sort={sortEn}\n            reset={reset}\n            nums={nums}\n            max={max}\n            sortFunction={BubbleSort}\n          />\n        </div>\n        <div className=\"column\">\n          <Graph\n            id=\"myChart3\"\n            sortType=\"Merge Sort\"\n            sort={sortEn}\n            reset={reset}\n            nums={nums}\n            max={max}\n            sortFunction={MergeSort}\n          />\n          <Graph\n            id=\"myChart4\"\n            sortType=\"Quick Sort\"\n            sort={sortEn}\n            reset={reset}\n            nums={nums}\n            max={max}\n            sortFunction={QuickSort}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.js';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}